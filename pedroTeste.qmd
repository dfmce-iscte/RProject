---
title: "Project"
format: pdf
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

```{r}
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(sf)
```

# 1. Data Collection and Cleaning

Extract all necessary documents and create a list with all the datasets

```{r}
X2017_S2_NB_FER <- read_delim("2017-2022/2017_S2_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2018_S1_NB_FER <- read_delim("2017-2022/2018_S1_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2018_S2_NB_Fer <- read_delim("2017-2022/2018_S2_NB_Fer.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2019_S1_NB_FER <- read_delim("2017-2022/2019_S1_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2019_S2_NB_FER <- read_delim("2017-2022/2019_S2_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2020_S1_NB_FER <- read_delim("2017-2022/2020_S1_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2020_S2_NB_FER <- read_delim("2017-2022/2020_S2_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2021_S1_NB_FER <- read_delim("2017-2022/2021_S1_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2021_S2_NB_FER <- read_delim("2017-2022/2021_S2_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2022_S1_NB_FER <- read_delim("2017-2022/2022_S1_NB_FER.txt", 
                              delim = "\t", escape_double = FALSE, 
                              trim_ws = TRUE)

X2022_S2_NB_FER <- read_delim("2017-2022/2022_S2_NB_FER.txt", 
                              delim = ";", escape_double = FALSE, trim_ws = TRUE)

X2023_s1_NB_FER <- read.csv("data/validations-reseau-ferre-nombre-validations-par-jour-1er-semestre.csv", sep = ";", header = TRUE)



data_frames_list <- list(
  X2017_S2_NB_FER, X2018_S1_NB_FER, X2018_S2_NB_Fer,
  X2019_S1_NB_FER, X2019_S2_NB_FER, X2020_S1_NB_FER, X2020_S2_NB_FER,
  X2021_S1_NB_FER, X2021_S2_NB_FER, X2022_S1_NB_FER, X2022_S2_NB_FER, X2023_s1_NB_FER
)

data_frames_list_names <- list(
  "X2017_S2_NB_FER", "X2018_S1_NB_FER", "X2018_S2_NB_Fer",
  "X2019_S1_NB_FER", "X2019_S2_NB_FER", "X2020_S1_NB_FER", "X2020_S2_NB_FER",
  "X2021_S1_NB_FER", "X2021_S2_NB_FER", "X2022_S1_NB_FER", "X2022_S2_NB_FER", "X2023_s1_NB_FER"
)
```

We tried to join all datasets, however some of the columns had more than one data type, therefore transformed all entries into the same data type. Datasets contained the same column "ID_REFA_LDA" but with different labels, therefore relabeled this column in some of the datasets so it had the same label throughout all datasets. When the values from \$CODE_STIF_RES and \$CODE_STIF_ARRET are equal to "ND" the value from LIBELLE_ARRET is "Inconnu": as neither the departure station nor the arrival station are known, it did not make sense to keep these record entries, therefore eliminated these rows Converted the rest of the entries for columns \$CODE_STIF_RES and \$CODE_STIF_ARRET to numerical values. For column \$CATEGORIE_TITRE, verified there were entries with value "?" and entries with value "NON DEFINI": replaced all values "?" to "NON DEFINI". Then it was possible to join all the datasets since they were represented with the same type.

```{r}
# Obtain columns with more than one type
results <- list()
for (df in data_frames_list) {
 for (col in names(df)) { 
   col_class <- sapply(df[[col]], class)[1]
   if (!(col %in% names(results))) {
     results[[col]] <- NULL
   }
   results[[col]] <- append(results[[col]], col_class)
 }
}
results <- lapply(results, unique)
multi_class_columns <- names(results)[sapply(results, length) > 1]
print(multi_class_columns)

#Remove the rows with the value "Inconnu" in the column LIBELLE_ARRET
data_frames_list <- lapply(data_frames_list, function(df) {
  subset(df, LIBELLE_ARRET != "Inconnu")
})

#Covert columns to numeric
data_frames_list <- lapply(data_frames_list, function(df) {
  df$CODE_STIF_RES <- as.numeric(df$CODE_STIF_RES)
  df$CODE_STIF_ARRET <- as.numeric(df$CODE_STIF_ARRET)
  return(df)
})

#Rename the columns called "lda" to "ID_REFA_LDA"
data_frames_list <- lapply(data_frames_list, function(df) {
  if ("lda" %in% names(df)) {
    df <- rename(df, ID_REFA_LDA = lda)
  }
  return(df)
})

#Combine all datasets in one 
combined_df <- bind_rows(data_frames_list)

#Replace the registers with "?" in column "CATEGORIE_TITRE" for "NON DEFINI"
combined_df <- mutate(combined_df, CATEGORIE_TITRE = ifelse(CATEGORIE_TITRE == "?", "NON DEFINI", CATEGORIE_TITRE))

```

Checking for outliers

For this step we decided to visualize all columns with graphs or analyze their distribution. We conclude that: =\> It's possible to check that the CODE_STIF_ARRET 19 is only used one time. We decided to eliminated all registers with this occurence for this column.

```{r}
#Create bar plot for variable "CODE_STIF_TRNS"
combined_df$CODE_STIF_TRNS <- as.factor(combined_df$CODE_STIF_TRNS)
ggplot(combined_df, aes(x=CODE_STIF_TRNS)) + 
  geom_bar(fill='blue', alpha=0.7) + scale_y_continuous(labels = label_number()) +
  labs(title="Barplot of CODE_STIF_TRNS", x="CODE_STIF_TRNS", y="Count")
```

```{r}
#Create bar plot for variable "CODE_STIF_RES"
combined_df$CODE_STIF_RES <- as.factor(combined_df$CODE_STIF_RES)
ggplot(combined_df, aes(x=CODE_STIF_RES)) + 
  geom_bar(fill='blue', alpha=0.7) + scale_y_continuous(labels = label_number()) +
  labs(title="Barplot of CODE_STIF_RES", x="CODE_STIF_RES", y="Count")
```

```{r}
#Create bar plot for variable ID_REFA_LDA
combined_df$ID_REFA_LDA <- as.factor(combined_df$ID_REFA_LDA)
ggplot(combined_df, aes(x=ID_REFA_LDA)) + 
  geom_bar(fill='blue', alpha=0.7) + scale_y_continuous(labels = label_number()) +
  labs(title="Barplot of ID_REFA_LDA", x="ID_REFA_LDA", y="Count")
```

```{r}
# VERFICAR SE FUNCIONA
#Create box plot for variable NB_VALD
ggplot(combined_df, aes(x=ID_REFA_LDA)) + 
  geom_boxplot(fill='blue', alpha=0.7) + scale_y_continuous(labels = label_number()) +
  labs(title="Boxplot of NB_VALD", x="", y="NB_VALD")
```

```{r}
#Create bar plot for variable CODE_STIF_ARRET
combined_df$CODE_STIF_ARRET <- as.factor(combined_df$CODE_STIF_ARRET)
ggplot(combined_df, aes(x=CODE_STIF_ARRET)) + 
  geom_bar(fill='blue', alpha=0.7) + scale_y_continuous(labels = label_number()) +
  labs(title="Barplot of CODE_STIF_ARRET", x="CODE_STIF_ARRET", y="Count")

# Analyze the distributuion for variable CODE_STIF_ARRET
code_arret_frequency <- table(combined_df$CODE_STIF_ARRET)
code_arret_frequency <- sort(code_arret_frequency, decreasing = TRUE)
print(code_arret_frequency)


```

```{r}
#Remove all records with value 19 for column CODE_STIF_ARRET
combined_df <- combined_df |> filter(CODE_STIF_ARRET != 19)
```

```{r}

data <- st_read("data/stations/REF_ZdA/PL_ZDL_R_06_12_2023.shp")
data <- st_transform(data, crs = 4326)
data <- dplyr::rename(data, ID_REFA_LDA = "idrefa_lda")
combined_df$ID_REFA_LDA <- as.numeric(combined_df$ID_REFA_LDA)
final_df <- left_join(combined_df, data, by = "ID_REFA_LDA")
# write.csv(final_df, "final_df.csv", row.names = FALSE)
```

```{r}
# Assuming 'JOUR' is your date column in the dataframe 'df'

# Convert 'JOUR' to Date format
combined_df$CATEGORIE_TITRE <- as.factor(combined_df$CATEGORIE_TITRE)
ggplot(combined_df, aes(x=CATEGORIE_TITRE)) + 
  geom_bar(fill='blue', alpha=0.7) + scale_y_continuous(labels = label_number()) + coord_flip() +
  labs(title="Barplot of CATEGORIE_TITRE", x="CATEGORIE_TITRE", y="Count")
```

```{r}
combined_df$JOUR <- as.Date(combined_df$JOUR, format = "%d/%m/%Y")

# Extract month, year, and season information
combined_df <- combined_df %>%
  mutate(Month = format(JOUR, "%m"),
         Year = format(JOUR, "%Y"),
         Season = case_when(
           between(as.numeric(format(JOUR, "%m")), 3, 5) ~ "Spring",
           between(as.numeric(format(JOUR, "%m")), 6, 8) ~ "Summer",
           between(as.numeric(format(JOUR, "%m")), 9, 11) ~ "Autumn",
           TRUE ~ "Winter"
         ))
```

```{r}
# Create a distribution plot for each month
ggplot(combined_df, aes(x = factor(Month))) +
  geom_bar() +
  labs(title = "Distribution by Month", x = "Month", y = "Count")
```

```{r}
# Create a distribution plot for each year
ggplot(combined_df, aes(x = factor(Year))) +
  geom_bar() +
  labs(title = "Distribution by Year", x = "Year", y = "Count")
```

```{r}
# Create a distribution plot for each season
ggplot(combined_df, aes(x = Season)) +
  geom_bar() +
  labs(title = "Distribution by Season", x = "Season", y = "Count")
```

```{r}
combined_df$JOUR <- dmy(combined_df$JOUR)

summer_2017_start <- dmy("08/07/2017")
summer_2017_end <- dmy("30/08/2017")
halloween_2017_start <- dmy("21/10/2017")
halloween_2017_end <- dmy("05/11/2017")
christmas_2017_start <- dmy("23/12/2017")
christmas_2017_end <- dmy("08/01/2018")

winter_2018_start <- dmy("18/02/2018")
winter_2018_end <- dmy("04/03/2018")
spring_2018_start <- dmy("15/04/2018")
spring_2018_end <- dmy("29/04/2018")
summer_2018_start <- dmy("08/07/2017")
summer_2018_end <- dmy("02/09/2018")
halloween_2018_start <- dmy("21/10/2018")
halloween_2018_end <- dmy("04/11/2018")
christmas_2018_start <- dmy("23/12/2018")
christmas_2018_end <- dmy("06/01/2019")

winter_2019_start <- dmy("24/02/2019")
winter_2019_end <- dmy("10/03/2019")
spring_2019_start <- dmy("21/04/2019")
spring_2019_end <- dmy("05/05/2019")
summer_2019_start <- dmy("07/07/2019")
summer_2019_end <- dmy("07/09/2019")
halloween_2019_start <- dmy("20/10/2019")
halloween_2019_end <- dmy("03/12/2019")
christmas_2019_start <- dmy("22/12/2019")
christmas_2019_end <- dmy("05/01/2020")

winter_2020_start <- dmy("09/02/2020")
winter_2020_end <- dmy("23/02/2020")
spring_2020_start <- dmy("05/04/2020")
spring_2020_end <- dmy("19/04/2020")
summer_2020_start <- dmy("05/07/2020")
summer_2020_end <- dmy("31/08/2020")
halloween_2020_start <- dmy("18/10/2020")
halloween_2020_end <- dmy("01/11/2020")
christmas_2020_start <- dmy("21/12/2020")
christmas_2020_end <- dmy("03/01/2021")

winter_2021_start <- dmy("14/02/2021")
winter_2021_end <- dmy("28/02/2021")
spring_2021_start <- dmy("11/04/2021")
spring_2021_end <- dmy("25/04/2021")
summer_2021_start <- dmy("07/07/2021")
summer_2021_end <- dmy("01/09/2021")
halloween_2021_start <- dmy("24/10/2021")
halloween_2021_end <- dmy("07/11/2021")
christmas_2021_start <- dmy("19/12/2021")
christmas_2021_end <- dmy("02/01/2022")

winter_2022_start <- dmy("20/02/2022")
winter_2022_end <- dmy("06/03/2022")
spring_2022_start <- dmy("24/04/2022")
spring_2022_end <- dmy("08/05/2022")
summer_2022_start <- dmy("08/07/2022")
summer_2022_end <- dmy("31/08/2022")
halloween_2022_start <- dmy("23/10/2022")
halloween_2022_end <- dmy("06/11/2022")
christmas_2022_start <- dmy("18/12/2022")
christmas_2022_end <- dmy("02/01/2023")

winter_2023_start <- dmy("19/02/2023")
winter_2023_end <- dmy("05/03/2023")
spring_2023_start <- dmy("23/04/2023")
spring_2023_end <- dmy("08/05/2023")




# Create the Holiday column
combined_df <- combined_df %>%
 mutate(Holiday = ifelse((JOUR >= summer_2017_start & JOUR <= summer_2017_end) |
                      (JOUR >= halloween_2017_start & JOUR <= halloween_2017_end) |
                      (JOUR >= christmas_2017_start & JOUR <= christmas_2017_end) |
                      (JOUR >= winter_2018_start & JOUR <= winter_2018_end) |
                      (JOUR >= spring_2018_start & JOUR <= spring_2018_end) |
                      (JOUR >= summer_2018_start & JOUR <= summer_2018_end) |
                      (JOUR >= halloween_2018_start & JOUR <= halloween_2018_end) |
                      (JOUR >= christmas_2018_start & JOUR <= christmas_2018_end) |
                      (JOUR >= winter_2019_start & JOUR <= winter_2019_end) |
                      (JOUR >= spring_2019_start & JOUR <= spring_2019_end) |
                      (JOUR >= summer_2019_start & JOUR <= summer_2019_end) |
                      (JOUR >= halloween_2019_start & JOUR <= halloween_2019_end) |
                      (JOUR >= christmas_2019_start & JOUR <= christmas_2019_end) |
                      (JOUR >= winter_2020_start & JOUR <= winter_2020_end) |
                      (JOUR >= spring_2020_start & JOUR <= spring_2020_end) |
                      (JOUR >= summer_2020_start & JOUR <= summer_2020_end) |
                      (JOUR >= halloween_2020_start & JOUR <= halloween_2020_end) |
                      (JOUR >= christmas_2020_start & JOUR <= christmas_2020_end) |
                      (JOUR >= winter_2021_start & JOUR <= winter_2021_end) |
                      (JOUR >= spring_2021_start & JOUR <= spring_2021_end) |
                      (JOUR >= summer_2021_start & JOUR <= summer_2021_end) |
                      (JOUR >= halloween_2021_start & JOUR <= halloween_2021_end) |
                      (JOUR >= christmas_2021_start & JOUR <= christmas_2021_end) |
                      (JOUR >= winter_2022_start & JOUR <= winter_2022_end) |
                      (JOUR >= spring_2022_start & JOUR <= spring_2022_end) |
                      (JOUR >= summer_2022_start & JOUR <= summer_2022_end) |
                      (JOUR >= halloween_2022_start & JOUR <= halloween_2022_end) |
                      (JOUR >= christmas_2022_start & JOUR <= christmas_2022_end) |
                      (JOUR >= winter_2023_start & JOUR <= winter_2023_end) |
                      (JOUR >= spring_2023_start & JOUR <= spring_2023_end)
                      , TRUE, FALSE))

```
